
openapi: 3.0.3
info:
  title: User Management API
  description: |
    This API specification defines the endpoints and operations for managing users.
    It includes functionalities such as creating, reading, and updating user data.
  contact:
    email: santtiagolozano@gmail.com
  version: 1.0.11
servers:
  - url: https://trainingdev/api/v1
tags:
  - name: user
    description: Operations related to user management.
paths:
  /user:
    post:
      tags:
        - user
      summary: Create User
      description: |
        This operation allows the creation of new users who are not registered yet.

        **Business Rules:**
        - If the user's email already exists in the database, return the error: "The user already exists. Please log in."
      operationId: createUser
      requestBody:
        description: User object that needs to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userAlreadyExists:
                  summary: Bad Request error
                  value:
                    code: "400"
                    message: "Password cannot be empty."
        '409':
          description: Conflict - User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userAlreadyExists:
                  summary: User already exists error
                  value:
                    code: "409"
                    message: "The user already exists. Please log in."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Internal Server Error
                  value:
                    code: "500"
                    message: "An unexpected error occurred. Please try again later."

    put:
      tags:
        - user
      summary: Update User
      description: |
        This operation allows the update of existing user information.

        **Business Rules:**
        - If the user to be modified does not exist in the database, return the error: "User does not exist."
      operationId: updateUser
      requestBody:
        description: User object with updated information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModified'
      responses:
        '200':
          description: User information successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Bad Request error
                  value:
                    code: "400"
                    message: "Id cannot be null."
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found error
                  value:
                    code: "404"
                    message: "User does not exist."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Internal Server Error
                  value:
                    code: "500"
                    message: "An unexpected error occurred. Please try again later."

  /user/{id}:
    get:
      tags:
        - user
      summary: Get User by ID
      description: |
        Retrieve detailed information about a user by their unique ID.

        **Business Rules:**
        - If the user does not exist in the database, return the error: "User does not exist."
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The unique identifier of the user to be retrieved.
          required: true
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found error
                  value:
                    code: "404"
                    message: "User does not exist."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Internal Server Error
                  value:
                    code: "500"
                    message: "An unexpected error occurred. Please try again later."

components:
  schemas:
    UserRequest:
      type: object
      required:
        - firstName
        - lastName
        - birthday
        - email
        - password
        - gender
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: |
            Unique identifier for the user.
        firstName:
          type: string
          example: Santiago
          description: |
            User's first name. Maximum 20 characters.

            **Business Rule:**
            - If it is empty, return the error: "First name cannot be empty."
            - If it exceeds 20 characters, return the error: "First name cannot be longer than 20 characters."
        lastName:
          type: string
          example: Lozano
          description: |
            User's last name. Maximum 20 characters.

            **Business Rule:**
            - If it is empty, return the error: "Last name cannot be empty."
            - If it exceeds 20 characters, return the error: "Last name cannot be longer than 20 characters."
        birthday:
          type: string
          format: date
          example: 2024-06-29
          description: |
            User's date of birth in the format YYYY-MM-DD.

            **Business Rule:**
            - If it is null, return the error: "Birthday cannot be null."
        email:
          type: string
          format: email
          example: santtiagolozano@gmail.com
          description: |
            User's email address.

            **Business Rule:**
            - If it is empty, return the error: "Email cannot be empty."
            - If it is in an incorrect format, return the error: "The email format is incorrect."
        password:
          type: string
          example: 'Al90@asd'
          description: |
            The user's password. It must contain at least one uppercase letter,
            one lowercase letter, one number, one special character, and be between 8 to 15 characters long.

            **Business Rule:**
            - If it does not meet these criteria, return the error: "Password does not meet the requirements."
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - CUSTOM
          example: MALE
          description: |
            The user's gender.

            **Business Rule:**
            - If it is null, return the error: "Gender cannot be null."

    UserDetail:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: |
            Unique identifier for the user.
        name:
          type: string
          example: Santiago Lozano
          description: |
            User's full name.
        birthday:
          type: string
          example: 2024-06-29
          description: |
            User's date of birth in the format YYYY-MM-DD.
        email:
          type: string
          example: santtiagolozano@gmail.com
          description: |
            User's email address.
        password:
          type: string
          example: 'Al90@asd'
          description: |
            User's email
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - CUSTOM
          example: MALE
          description: |
            The user's gender.
        profilePhoto:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the user's profile picture.
        coverPhoto:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the user's cover image.
        creationDate:
          type: string
          example: '2024-06-29T10:34:59.5482264'
          description: |
            Date and time when the user was created (ISO 8601 format).
        modificationDate:
          type: string
          example: '2024-06-29T10:34:59.5482264'
          description: |
            Date and time when the user was last modified (ISO 8601 format).

    UserModified:
      type: object
      required:
        - id
        - name
        - birthday
        - email
        - password
        - gender
        - profilePhoto
        - coverPhoto
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: |
            Unique identifier for the user.
            
            **Business Rule:**
            - If id is null, return the error: "Id cannot be null."
        name:
          type: string
          example: Santiago Lozano
          description: |
            User's full name.
            
             **Business Rule:**
            - If name is null, return the error: "Name cannot be null."
        birthday:
          type: string
          example: 2024-06-29
          description: |
            User's date of birth in the format YYYY-MM-DD.
            
             **Business Rule:**
            - If birthday is null, return the error: "Birthday cannot be null."
        email:
          type: string
          example: santtiagolozano@gmail.com
          description: |
            User's email address.
            
            **Business Rule:**
            - If email is null, return the error: "Email cannot be null."
        password:
          type: string
          example: 'Al90@asd'
          description: |
            User's email
            
            **Business Rule:**
            - If password is null, return the error: "Password cannot be null."
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - CUSTOM
          example: MALE
          description: |
            The user's gender.
            
            **Business Rule:**
            - If gender is null, return the error: "Gender cannot be null."
        profilePhoto:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the user's profile picture.
            
            **Business Rule:**
            - If profilePhoto is null, return the error: "ProfilePhoto cannot be null."
        coverPhoto:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the user's cover image.
            
             **Business Rule:**
            - If coverPhoto is null, return the error: "CoverPhoto cannot be null."


    UserComment:
      type: object
      properties:
        id:
          type: string
          example: '10'
          description: |
            Unique identifier for the user.
        name:
          type: string
          example: 'Santiago Lozano'
          description: |
            User's full name.
        profilePhoto:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the user's profile picture.

    Comment:
      type: object
      properties:
        id:
          type: string
          example: '1'
          description: |
            Unique identifier for the comment.
        user:
          $ref: '#/components/schemas/UserComment'
        description:
          type: string
          example: 'The best'
          description: |
            Comment text or description.
        creationDate:
          type: string
          example: '2024-06-29T07:36:39.2252098'
          description: |
            Date and time when the comment was created (ISO 8601 format).

    PostDetail:
      type: object
      properties:
        id:
          type: integer
          example: 10
          description: |
            Unique identifier for the post.
        userId:
          type: integer
          example: 10
          description: |
            Unique identifier for the user who made the post.
        type:
          type: string
          enum:
            - PRIVATE
            - PUBLIC
          example: PUBLIC
          description: |
            Visibility type of the post.
        feeling:
          type: string
          enum:
            - HAPPY
            - LOVELY
            - SAD
          example: HAPPY
          description: |
            Feeling chosen by the user for the post.
        description:
          type: string
          example: "Become a Junior Java Developer"
          description: |
            Content of the post.
        image:
          type: string
          example: 'https://trainingdev-s3/...'
          description: |
            URL of the image attached to the post.
        creationDate:
          type: string
          example: '2024-06-29T07:36:39'
          description: |
            Date and time when the post was created (ISO 8601 format).
        modificationDate:
          type: string
          example: '2024-06-29T07:36:39'
          description: |
            Date and time when the post was last modified (ISO 8601 format).
        commentList:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      required:
        - id

    UserProfile:
      type: object
      properties:
        userDetail:
          $ref: '#/components/schemas/UserDetail'
        postList:
          type: array
          items:
            $ref: '#/components/schemas/PostDetail'

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: |
            Status code of the error.
        message:
          type: string
          description: |
            Description of the error message.
